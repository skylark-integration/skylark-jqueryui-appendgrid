{"version":3,"sources":["skylark-jqueryui-appendgrid.js"],"names":["define","langx","$","_defaultInitOptions","caption","captionTooltip","initRows","maxRowsAllowed","initData","columns","i18n","idPrefix","rowDragging","hideButtons","hideRowNumColumn","rowButtonsInFront","rowCountName","buttonClasses","sectionClasses","customGridButtons","customRowButtons","customFooterButtons","useSubPanel","maintainScroll","maxBodyHeight","autoColumnWidth","_defaultCallbackContainer","nameFormatter","dataLoaded","rowDataLoaded","afterRowAppended","afterRowInserted","afterRowSwapped","beforeRowRemove","afterRowRemoved","afterRowDragged","subPanelBuilder","subPanelGetter","maxNumRowsReached","_defaultColumnOptions","type","name","value","display","displayCss","displayTooltip","headerSpan","cellCss","ctrlAttr","ctrlProp","ctrlCss","ctrlClass","ctrlOptions","uiOption","uiTooltip","resizable","invisible","emptyCriteria","customBuilder","customGetter","customSetter","onClick","onChange","_systemMessages","noColumnInfo","elemNotTable","notInit","getValueMultiGrid","notSupportMethod","_defaultTextResources","append","removeLast","insert","remove","moveUp","moveDown","rowDrag","rowEmpty","_defaultButtonClasses","_defaultSectionClasses","header","body","subPanel","footer","_defaultHideButtons","_methods","init","options","this","length","isArray","alert","tbWrap","tbHead","tbBody","tbFoot","tbColGp","tbRow","tbCell","tbWhole","isEmpty","tagName","tbHeadCellRowNum","tbHeadCellRowButton","settings","extend","_uniqueIndex","_rowOrder","_isDataLoaded","_visibleCount","_finalColSpan","_hideLastColumn","_wrapperId","_calculateWidth","isPlainObject","_i18n","_buttonClasses","_sectionClasses","id","Date","getTime","document","createElement","className","attr","addClass","insertAfter","empty","appendTo","prependTo","wrap","css","appendChild","pendingSkipCol","z","columnOpt","tooltip","isFunction","text","jQuery","ui","handles","insertBefore","firstChild","childnodes","colSpan","button","createGridButton","title","click","evt","insertRow","preventDefault","removeRow","y","buttonCfg","uiButton","atTheFront","prepend","makeCustomBottomButton","style","sortable","axis","containment","handle","helper","e","tr","org","children","clone","each","index","width","eq","helperSelect","orgSelect","find","update","event","uniqueIndex","item","substring","lastIndexOf","tbRowIndex","rowIndex","isMoveUp","data","startIndex","splice","sortSequence","saveSetting","gridRowDragged","originalPosition","top","position","loadData","appendGrid","showEmptyMessage","calculateColumnWidth","isReady","checkGridAndGetSettings","isDataLoaded","load","records","emptyGrid","appendRow","numOfRowOrRowArray","callerUniqueIndex","isNumeric","insertResult","insertUniqueIndex","addedRows","focus","target","moveUpRow","trTarget","trSwap","trAdtTarget","swapSeq","oldIndex","getElementsByTagName","findRowIndex","getElementById","removeChild","html","removeClass","blur","moveDownRow","trAdtSwap","showColumn","colIndex","hideColumn","isColumnInvisible","getRowCount","getUniqueIndex","getRowIndex","getRowValue","loopIndex","result","getAllValue","objectMode","rowValue","push","getCtrlValue","setCtrlValue","getCellCtrl","getCellCtrlByUniqueIndex","getRowOrder","slice","getColumns","isRowEmpty","removeEmptyRows","grid","noMsg","ctrl","parentIndex","hidden","tbSubRow","reachMaxRow","calColWidth","oldHeight","oldScroll","numOfRow","height","scrollParent","scrollTop","childNodes","rowSpan","ctrlName","ctrlId","lastGroupName","lastGroupElem","x","group","label","option","val","Option","arrayOpt","split","eqIndex","indexOf","selectmenu","textAlign","search","err","datepicker","spinner","autocomplete","prop","caller","callback","change","tabindex","rowUniqueIndex","makeCustomRowButton","scroll","scrollHeight","offsetHeight","newHeight","exButton","btnClass","btnCss","btnAttr","rowData","force","pop","lastChild","skipWidthCalculation","$emptyCell","isInit","r","c","join","keyName","suffix","adtData","newData","key","columnName","checked","element","param","uiIcon","genButton","nodeType","icon","showLabel","currentValue","defaultValue","$tbWhole","$scroller","tbHeadRow","tbBodyRow","marginThreshold","fn","modal","colLimit","Math","min","headCellWidth","clientWidth","bodyCellWidth","offsetWidth","params","apply","Array","prototype","call","arguments","main"],"mappings":"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","file":"../skylark-jqueryui-appendgrid.js","sourcesContent":["define('skylark-jqueryui-appendgrid/appendGrid',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-utils-dom/query\",\r\n    \"skylark-jqueryui-interact/Sortable\",\r\n    \"skylark-jqueryui/widgets/button\",   \r\n    \"skylark-jqueryui/widgets/tooltip\"   \r\n],function(langx,$) {\r\n    // The default initial options.\r\n    var _defaultInitOptions = {\r\n        // The text as table caption, set null to disable caption generation.\r\n        caption: null,\r\n        // Tooltip for caption.\r\n        captionTooltip: null,\r\n        // The total number of empty rows generated when init the grid. This will be ignored if `initData` is assigned.\r\n        initRows: 3,\r\n        // The maximum number of rows allowed in this grid.\r\n        maxRowsAllowed: 0,\r\n        // An array of data to be filled after initialized the grid.\r\n        initData: null,\r\n        // Array of column options.\r\n        columns: null,\r\n        // Labels or messages used in grid.\r\n        i18n: null,\r\n        // The ID prefix of controls generated inside the grid. Table ID will be used if not defined.\r\n        idPrefix: null,\r\n        // Enable row dragging by using jQuery UI sortable on grid rows.\r\n        rowDragging: false,\r\n        // Hide the buttons at the end of rows or bottom of grid.\r\n        hideButtons: null,\r\n        // Hide the row number column.\r\n        hideRowNumColumn: false,\r\n        // Generate row buttom column in the front of input columns.\r\n        rowButtonsInFront: false,\r\n        // The variable name of row count used for object mode of getAllValue\r\n        rowCountName: '_RowCount',\r\n        // The extra class names for buttons.\r\n        buttonClasses: null,\r\n        // The extra class names for table sections.\r\n        sectionClasses: null,\r\n        // Custom the standard grid buttons.\r\n        customGridButtons: null,\r\n        // Adding extra button(s) at the end of rows.\r\n        customRowButtons: null,\r\n        // Adding extra button(s) at the bottom of grid.\r\n        customFooterButtons: null,\r\n        // Use the sub panel or not\r\n        useSubPanel: false,\r\n        // Maintain the scroll position after appended or removed last row.\r\n        maintainScroll: false,\r\n        // The maximum height of grid content, scroll bar will be display when the height is greater than this value.\r\n        maxBodyHeight: 0,\r\n        // Auto calculate the column width when scroll bar on table body is in use.\r\n        autoColumnWidth: true\r\n    };\r\n    var _defaultCallbackContainer = {\r\n        // The callback function for format the HTML name of generated controls.\r\n        nameFormatter: null,\r\n        // The callback function to be triggered after all data loaded to grid.\r\n        dataLoaded: null,\r\n        // The callback function to be triggered after data loaded to a row.\r\n        rowDataLoaded: null,\r\n        // The callback function to be triggered after new row appended.\r\n        afterRowAppended: null,\r\n        // The callback function to be triggered after new row inserted.\r\n        afterRowInserted: null,\r\n        // The callback function to be triggered after grid row swapped.\r\n        afterRowSwapped: null,\r\n        // The callback function to be triggered before grid row remove.\r\n        beforeRowRemove: null,\r\n        // The callback function to be triggered after grid row removed.\r\n        afterRowRemoved: null,\r\n        // The callback function to be triggered after grid row dragged.\r\n        afterRowDragged: null,\r\n        // The callback function for generating sub panel content.\r\n        subPanelBuilder: null,\r\n        // The callback function for getting values from sub panel. Used for `getAllValue` method.\r\n        subPanelGetter: null,\r\n        // The callback function to be triggered when row(s) is/are adding to grid but the maximum number of rows allowed is reached.\r\n        maxNumRowsReached: null\r\n    };\r\n    // Default column options.\r\n    var _defaultColumnOptions = {\r\n        // Type of column control.\r\n        type: 'text',\r\n        // Name of column.\r\n        name: null,\r\n        // Default value.\r\n        value: null,\r\n        // Display text on the header section.\r\n        display: null,\r\n        // Extra CSS setting to be added to display text.\r\n        displayCss: null,\r\n        // Tooltip for column head.\r\n        displayTooltip: null,\r\n        // The `colspan` setting on the column header.\r\n        headerSpan: 1,\r\n        // Extra CSS setting to be added to the control container table cell.\r\n        cellCss: null,\r\n        // Extra attributes to be added to the control.\r\n        ctrlAttr: null,\r\n        // Extra properties to be added to the control.\r\n        ctrlProp: null,\r\n        // Extra CSS to be added to the control.\r\n        ctrlCss: null,\r\n        // Extra name of class to be added to the control.\r\n        ctrlClass: null,\r\n        // The available option for building `select` type control.\r\n        ctrlOptions: null,\r\n        // Options for initalize jQuery UI widget.\r\n        uiOption: null,\r\n        // Options for initalize jQuery UI tooltip.\r\n        uiTooltip: null,\r\n        // Let column resizable by using jQuery UI Resizable Interaction.\r\n        resizable: false,\r\n        // Show or hide column after initialized.\r\n        invisible: false,\r\n        // The value to compare for indentify this column value is empty.\r\n        emptyCriteria: null,\r\n        // Callback function to build custom type control.\r\n        customBuilder: null,\r\n        // Callback function to get control value.\r\n        customGetter: null,\r\n        // Callback function to set control value.\r\n        customSetter: null,\r\n        // The `OnClick` event callback of control.\r\n        onClick: null,\r\n        // The `OnChange` event callback of control.\r\n        onChange: null\r\n    };\r\n    var _systemMessages = {\r\n        noColumnInfo: 'Cannot initial grid without column information!',\r\n        elemNotTable: 'Cannot initial grid on element other than TABLE!',\r\n        notInit: '`appendGrid` does not initialized',\r\n        getValueMultiGrid: 'Cannot get values on multiple grid',\r\n        notSupportMethod: 'Method is not supported by `appendGrid`: '\r\n    };\r\n    var _defaultTextResources = {\r\n        append: 'Append Row',\r\n        removeLast: 'Remove Last Row',\r\n        insert: 'Insert Row Above',\r\n        remove: 'Remove Current Row',\r\n        moveUp: 'Move Up',\r\n        moveDown: 'Move Down',\r\n        rowDrag: 'Sort Row',\r\n        rowEmpty: 'This Grid Is Empty'\r\n    };\r\n    var _defaultButtonClasses = { append: null, removeLast: null, insert: null, remove: null, moveUp: null, moveDown: null, rowDrag: null };\r\n    var _defaultSectionClasses = { caption: null, header: null, body: null, subPanel: null, footer: null };\r\n    var _defaultHideButtons = { append: false, removeLast: false, insert: false, remove: false, moveUp: false, moveDown: false };\r\n    var _methods = {\r\n        init: function (options) {\r\n            var target = this;\r\n            if (target.length > 0) {\r\n                // Check mandatory paramters included\r\n                if (!langx.isArray(options.columns) || options.columns.length == 0) {\r\n                    alert(_systemMessages.noColumnInfo);\r\n                    return target;\r\n                }\r\n                // Check target element is table or not\r\n                var tbWhole = target[0], tbWrap, tbHead, tbBody, tbFoot, tbColGp, tbRow, tbCell;\r\n                if (isEmpty(tbWhole.tagName) || tbWhole.tagName != 'TABLE') {\r\n                    alert(_systemMessages.elemNotTable);\r\n                    return target;\r\n                }\r\n                // Generate settings\r\n                var settings = langx.extend({}, _defaultInitOptions, _defaultCallbackContainer, options);\r\n                // Add internal settings\r\n                langx.extend(settings, {\r\n                    // The UniqueIndex accumulate counter\r\n                    _uniqueIndex: 0,\r\n                    // The row order array\r\n                    _rowOrder: [],\r\n                    // Indicate data is loaded or not\r\n                    _isDataLoaded: false,\r\n                    // Visible column count for internal calculation\r\n                    _visibleCount: 0,\r\n                    // Total colSpan count after excluding `hideRowNumColumn` and not generating last column\r\n                    _finalColSpan: 0,\r\n                    // Indicate to hide last column or not\r\n                    _hideLastColumn: false,\r\n                    // The element ID of the `appendGrid` wrapper\r\n                    _wrapperId: null,\r\n                    // \r\n                    _calculateWidth: true\r\n                });\r\n                // Labels or messages used in grid\r\n                if (langx.isPlainObject(options.i18n))\r\n                    settings._i18n = langx.extend({}, _defaultTextResources, options.i18n);\r\n                else\r\n                    settings._i18n = langx.extend({}, _defaultTextResources);\r\n                // The extra class names for buttons\r\n                if (langx.isPlainObject(options.buttonClasses))\r\n                    settings._buttonClasses = langx.extend({}, _defaultButtonClasses, options.buttonClasses);\r\n                else\r\n                    settings._buttonClasses = langx.extend({}, _defaultButtonClasses);\r\n                // The extra class names for sections\r\n                if (langx.isPlainObject(options.sectionClasses))\r\n                    settings._sectionClasses = langx.extend({}, _defaultSectionClasses, options.sectionClasses);\r\n                else\r\n                    settings._sectionClasses = langx.extend({}, _defaultSectionClasses);\r\n                // Make sure the `hideButtons` setting defined\r\n                if (langx.isPlainObject(options.hideButtons))\r\n                    settings.hideButtons = langx.extend({}, _defaultHideButtons, options.hideButtons);\r\n                else\r\n                    settings.hideButtons = langx.extend({}, _defaultHideButtons);\r\n                // Check `idPrefix` is defined\r\n                if (isEmpty(settings.idPrefix)) {\r\n                    // Check table ID defined\r\n                    if (isEmpty(tbWhole.id) || tbWhole.id == '') {\r\n                        // Generate an ID using current time\r\n                        settings.idPrefix = 'ag' + new Date().getTime();\r\n                    }\r\n                    else {\r\n                        settings.idPrefix = tbWhole.id;\r\n                    }\r\n                }\r\n                // Check custom grid button parameters\r\n                if (!langx.isPlainObject(settings.customGridButtons)) {\r\n                    settings.customGridButtons = {};\r\n                }\r\n                // Check rowDragging and useSubPanel option\r\n                if (settings.useSubPanel && settings.rowDragging) {\r\n                    settings.rowDragging = false;\r\n                }\r\n                // Create thead and tbody\r\n                tbHead = document.createElement('thead');\r\n                tbHead.className = 'ui-widget-header';\r\n                tbBody = document.createElement('tbody');\r\n                tbBody.className = 'ui-widget-content';\r\n                tbFoot = document.createElement('tfoot');\r\n                tbFoot.className = 'ui-widget-header';\r\n                tbColGp = document.createElement('colgroup');\r\n                // Prepare the table element\r\n                settings._wrapperId = settings.idPrefix + '-wrapper';\r\n                tbWrap = document.createElement('div');\r\n                $(tbWrap).attr('id', settings._wrapperId).addClass('appendGrid').insertAfter(tbWhole);\r\n                $(tbWhole).empty().addClass('ui-widget').appendTo(tbWrap);\r\n                // Check if content scrolling is enabled\r\n                if (settings.maxBodyHeight > 0) {\r\n                    // Seperate the thead and tfoot from source table\r\n                    $('<table></table>').addClass('ui-widget head').append(tbHead).prependTo(tbWrap);\r\n                    $(tbWhole).addClass('body').wrap($('<div></div>').addClass('scroller').css('max-height', settings.maxBodyHeight)).append(tbColGp, tbBody);\r\n                    $('<table></table>').addClass('ui-widget foot').append(tbFoot).appendTo(tbWrap);\r\n                } else {\r\n                    // Add thead, tbody and tfoot to the same table\r\n                    $(tbWhole).addClass('head body foot').append(tbColGp, tbHead, tbBody, tbFoot);\r\n                }\r\n                // Handle header row\r\n                var tbHeadCellRowNum, tbHeadCellRowButton;\r\n                tbHead.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.header) {\r\n                    tbRow.className = 'columnHead ' + settings._sectionClasses.header;\r\n                } else {\r\n                    tbRow.className = 'columnHead';\r\n                }\r\n                if (!settings.hideRowNumColumn) {\r\n                    tbRow.appendChild(tbHeadCellRowNum = document.createElement('td'));\r\n                    tbHeadCellRowNum.className = 'ui-widget-header first';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Prepare column information and add column header\r\n                var pendingSkipCol = 0;\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    // Assign default setting\r\n                    var columnOpt = langx.extend({}, _defaultColumnOptions, settings.columns[z]);\r\n                    settings.columns[z] = columnOpt;\r\n                    // Skip hidden\r\n                    if (settings.columns[z].type != 'hidden') {\r\n                        // Check column is invisible\r\n                        if (!settings.columns[z].invisible) {\r\n                            settings._visibleCount++;\r\n                        }\r\n                        // Check skip header colSpan\r\n                        if (pendingSkipCol == 0) {\r\n                            var className = 'ui-widget-header';\r\n                            if (settings.columns[z].invisible) className += ' invisible';\r\n                            if (settings.columns[z].resizable) className += ' resizable';\r\n                            tbRow.appendChild(tbCell = document.createElement('td'));\r\n                            tbCell.id = settings.idPrefix + '_' + settings.columns[z].name + '_td_head';\r\n                            tbCell.className = className;\r\n                            if (settings.columns[z].displayCss) $(tbCell).css(settings.columns[z].displayCss);\r\n                            if (settings.columns[z].headerSpan > 1) {\r\n                                $(tbCell).attr('colSpan', settings.columns[z].headerSpan);\r\n                                pendingSkipCol = settings.columns[z].headerSpan - 1;\r\n                            }\r\n                            // Add tooltip\r\n                            if (langx.isPlainObject(settings.columns[z].displayTooltip)) {\r\n                                $(tbCell).tooltip(settings.columns[z].displayTooltip);\r\n                            }\r\n                            else if (!isEmpty(settings.columns[z].displayTooltip)) {\r\n                                $(tbCell).attr('title', settings.columns[z].displayTooltip).tooltip();\r\n                            }\r\n                            // Check to set display text or generate by function\r\n                            if (langx.isFunction(settings.columns[z].display)) {\r\n                                settings.columns[z].display(tbCell);\r\n                            } else if (!isEmpty(settings.columns[z].display)) {\r\n                                $(tbCell).text(settings.columns[z].display);\r\n                            }\r\n                            // Add column group for scrolling\r\n                            tbColGp.appendChild(document.createElement('col'));\r\n                        } else {\r\n                            pendingSkipCol--;\r\n                        }\r\n                    }\r\n                }\r\n                // Enable columns resizable\r\n                if (!isEmpty(jQuery.ui.resizable)) {\r\n                    $('td.resizable', tbHead).resizable({ handles: 'e' });\r\n                }\r\n                // Check to hide last column or not\r\n                if (settings.hideButtons.insert && settings.hideButtons.remove\r\n                        && settings.hideButtons.moveUp && settings.hideButtons.moveDown\r\n                        && (!langx.isArray(settings.customRowButtons) || settings.customRowButtons.length == 0)) {\r\n                    settings._hideLastColumn = true;\r\n                }\r\n                // Calculate the `_finalColSpan` value\r\n                settings._finalColSpan = settings._visibleCount;\r\n                if (!settings.hideRowNumColumn) settings._finalColSpan++;\r\n                if (!settings._hideLastColumn) settings._finalColSpan++;\r\n                // Generate last column header if needed\r\n                if (!settings._hideLastColumn) {\r\n                    if (settings.rowButtonsInFront) {\r\n                        if (settings.hideRowNumColumn) {\r\n                            // Insert a cell at the front\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.firstChild);\r\n                        } else {\r\n                            // Span the first cell that across row number and row button cells\r\n                            // tbHeadCellRowNum.colSpan = 2;\r\n                            // tbHeadCellRowButton = tbHeadCellRowNum;\r\n\r\n                            // Insert a cell as the second column\r\n                            tbRow.insertBefore(tbHeadCellRowButton = document.createElement('td'), tbRow.childnodes[1]);\r\n                        }\r\n                    } else {\r\n                        tbRow.appendChild(tbHeadCellRowButton = document.createElement('td'));\r\n                    }\r\n                    tbHeadCellRowButton.className = 'ui-widget-header last';\r\n                    tbHeadCellRowButton.id = settings.idPrefix + '_last_td_head';\r\n                    // Add column group for scrolling\r\n                    tbColGp.appendChild(document.createElement('col'));\r\n                }\r\n                // Add caption when defined\r\n                if (settings.caption) {\r\n                    tbHead.insertBefore(tbRow = document.createElement('tr'), tbHead.firstChild);\r\n                    if (settings._sectionClasses.caption) {\r\n                        tbRow.className = settings._sectionClasses.caption;\r\n                    }\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                    tbCell.id = settings.idPrefix + '_caption_td';\r\n                    tbCell.className = 'ui-state-active caption';\r\n                    tbCell.colSpan = settings._finalColSpan;\r\n                    // Add tooltip\r\n                    if (langx.isPlainObject(settings.captionTooltip)) {\r\n                        $(tbCell).tooltip(settings.captionTooltip);\r\n                    } else if (!isEmpty(settings.captionTooltip)) {\r\n                        $(tbCell).attr('title', settings.captionTooltip).tooltip();\r\n                    }\r\n                    // Check to set display text or generate by function\r\n                    if (langx.isFunction(settings.caption)) {\r\n                        settings.caption(tbCell);\r\n                    } else {\r\n                        $(tbCell).text(settings.caption);\r\n                    }\r\n                }\r\n                // Handle footer row\r\n                tbFoot.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings._sectionClasses.footer) {\r\n                    tbRow.className = settings._sectionClasses.footer;\r\n                }\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_footer_td';\r\n                tbCell.colSpan = settings._finalColSpan;\r\n                $('<input/>').attr({\r\n                    type: 'hidden',\r\n                    id: settings.idPrefix + '_rowOrder',\r\n                    name: settings.idPrefix + '_rowOrder'\r\n                }).appendTo(tbCell);\r\n                // Make row invisible if all buttons are hidden\r\n                if (settings.hideButtons.append && settings.hideButtons.removeLast\r\n                        && (!langx.isArray(settings.customFooterButtons) || settings.customFooterButtons.length == 0)) {\r\n                    tbRow.style.display = 'none';\r\n                } else {\r\n                    if (!settings.hideButtons.append) {\r\n                        var button = createGridButton(settings.customGridButtons.append, 'ui-icon-plusthick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.append }).addClass('append')\r\n                        .click(function (evt) {\r\n                            insertRow(tbWhole, 1, null, null);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.append)) button.addClass(settings._buttonClasses.append);\r\n                    }\r\n                    if (!settings.hideButtons.removeLast) {\r\n                        var button = createGridButton(settings.customGridButtons.removeLast, 'ui-icon-closethick')\r\n\t\t\t\t\t\t.attr({ title: settings._i18n.removeLast }).addClass('removeLast')\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    removeRow(tbWhole, null, this.value, false);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                        if (!isEmpty(settings._buttonClasses.removeLast)) button.addClass(settings._buttonClasses.removeLast);\r\n                    }\r\n                    if (settings.customFooterButtons && settings.customFooterButtons.length) {\r\n                        // Add front buttons\r\n                        for (var y = settings.customFooterButtons.length - 1; y >= 0; y--) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                                $(tbCell).prepend(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                        // Add end buttons\r\n                        for (var y = 0; y < settings.customFooterButtons.length; y++) {\r\n                            var buttonCfg = settings.customFooterButtons[y];\r\n                            if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                                $(tbCell).append(makeCustomBottomButton(tbWhole, buttonCfg));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // Enable dragging\r\n                if (settings.rowDragging) {\r\n                    $(tbBody).sortable({\r\n                        axis: 'y',\r\n                        containment: tbWhole,\r\n                        handle: '.rowDrag',\r\n                        helper: function (e, tr) {\r\n                            var org = tr.children();\r\n                            var helper = tr.clone();\r\n                            // Fix the cell width of cloned table cell\r\n                            helper.children().each(function (index) {\r\n                                $(this).width(org.eq(index).width());\r\n                                // Set the value of drop down list when drag (Issue #18)\r\n                                var helperSelect = $('select', this);\r\n                                if (helperSelect.length > 0) {\r\n                                    for (var y = 0; y < helperSelect.length; y++) {\r\n                                        var orgSelect = org.eq(index).find('select');\r\n                                        if (orgSelect.length > y) {\r\n                                            helperSelect[y].value = orgSelect[y].value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                            return helper;\r\n                        },\r\n                        update: function (event, ui) {\r\n                            var uniqueIndex = ui.item[0].id.substring(ui.item[0].id.lastIndexOf('_') + 1);\r\n                            var tbRowIndex = ui.item[0].rowIndex - $('tr', tbHead).length;\r\n                            gridRowDragged(tbWhole, ui.originalPosition.top > ui.position.top, uniqueIndex, tbRowIndex);\r\n                        }\r\n                    });\r\n                }\r\n                // Save options\r\n                $(tbWhole).data('appendGrid', settings);\r\n                if (langx.isArray(options.initData)) {\r\n                    // Load data if initData is array\r\n                    loadData(tbWhole, options.initData, true);\r\n                } else {\r\n                    // Add empty rows\r\n                    $(tbWhole).appendGrid('appendRow', settings.initRows);\r\n                }\r\n                // Show no rows in grid\r\n                if (settings._rowOrder.length == 0) {\r\n                    showEmptyMessage(tbWrap, settings, true);\r\n                }\r\n                // Calculate column width\r\n                if (settings.maxBodyHeight > 0) {\r\n                    if (settings.autoColumnWidth) {\r\n                        calculateColumnWidth(tbWrap);\r\n                    } else {\r\n                        $('table.foot', tbWrap).width($(tbWhole).width());\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        isReady: function () {\r\n            // Check the appendGrid is initialized or not\r\n            var settings = checkGridAndGetSettings(this, true);\r\n            if (settings) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        isDataLoaded: function () {\r\n            // Check the grid data is loaded by `load` method or `initData` parameter or not\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._isDataLoaded;\r\n            }\r\n            return false;\r\n        },\r\n        load: function (records) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                if (records != null && records.length > 0) {\r\n                    loadData(target[0], records, false);\r\n                } else {\r\n                    emptyGrid(target[0]);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        appendRow: function (numOfRowOrRowArray) {\r\n            return this.appendGrid('insertRow', numOfRowOrRowArray);\r\n        },\r\n        insertRow: function (numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                if ((langx.isArray(numOfRowOrRowArray) && numOfRowOrRowArray.length > 0) || (langx.isNumeric(numOfRowOrRowArray) && numOfRowOrRowArray > 0)) {\r\n                    // Define variables\r\n                    var tbWhole = this[0];\r\n                    insertResult = insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex);\r\n                    // Reorder sequence as needed\r\n                    if (langx.isNumeric(rowIndex) || langx.isNumeric(callerUniqueIndex)) {\r\n                        // Sort sequence\r\n                        sortSequence(tbWhole, insertResult.rowIndex);\r\n                        // Move focus\r\n                        var insertUniqueIndex = settings._rowOrder[insertResult.addedRows[0]];\r\n                        $('#' + settings.idPrefix + '_Insert_' + insertUniqueIndex, tbWhole).focus();\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        removeRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && settings._rowOrder.length > 0) {\r\n                removeRow(this[0], rowIndex, uniqueIndex, true);\r\n            }\r\n            return this;\r\n        },\r\n        emptyGrid: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                emptyGrid(this[0]);\r\n            }\r\n            return target;\r\n        },\r\n        moveUpRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtTarget, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex > 0 && rowIndex < settings._rowOrder.length) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex > 0) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex - 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtTarget = document.getElementById(settings.idPrefix + '_SubRow_' + uniqueIndex, tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.removeChild(trAdtTarget);\r\n                    }\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trTarget, trSwap);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtTarget, trSwap);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex - 1];\r\n                    settings._rowOrder[oldIndex - 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveUp', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveUp', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex - 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        moveDownRow: function (rowIndex, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this), target = this;\r\n            if (settings) {\r\n                var tbWhole = target[0], trTarget, trSwap, trAdtSwap, swapSeq, oldIndex = null;\r\n                var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length - 1) {\r\n                    oldIndex = rowIndex;\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                } else if (langx.isNumeric(uniqueIndex)) {\r\n                    oldIndex = findRowIndex(uniqueIndex, settings);\r\n                }\r\n                if (oldIndex != null && oldIndex != settings._rowOrder.length - 1) {\r\n                    // Get row to swap\r\n                    trTarget = document.getElementById(settings.idPrefix + '_Row_' + uniqueIndex, tbWhole);\r\n                    trSwap = document.getElementById(settings.idPrefix + '_Row_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    // Get the sub panel row if used\r\n                    if (settings.useSubPanel) {\r\n                        trAdtSwap = document.getElementById(settings.idPrefix + '_SubRow_' + settings._rowOrder[oldIndex + 1], tbWhole);\r\n                    }\r\n                    // Remove current row\r\n                    tbBody.removeChild(trSwap);\r\n                    // Insert before the above row\r\n                    tbBody.insertBefore(trSwap, trTarget);\r\n                    if (settings.useSubPanel) {\r\n                        tbBody.insertBefore(trAdtSwap, trTarget);\r\n                    }\r\n                    // Update rowOrder\r\n                    settings._rowOrder[oldIndex] = settings._rowOrder[oldIndex + 1];\r\n                    settings._rowOrder[oldIndex + 1] = uniqueIndex;\r\n                    // Update row label\r\n                    swapSeq = $('td.first', trSwap).html();\r\n                    $('td.first', trSwap).html($('td.first', trTarget).html());\r\n                    $('td.first', trTarget).html(swapSeq)\r\n                    // Save setting\r\n                    saveSetting(tbWhole, settings);\r\n                    // Change focus\r\n                    $('td.last button.moveDown', trTarget).removeClass('ui-state-hover').blur();\r\n                    $('td.last button.moveDown', trSwap).focus();\r\n                    // Trigger event\r\n                    if (settings.afterRowSwapped) {\r\n                        settings.afterRowSwapped(tbWhole, oldIndex, oldIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n        showColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and show the column if it is invisible only\r\n                if (colIndex != -1 && settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount++;\r\n                    settings._finalColSpan++;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Remove invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').removeClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).removeClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = false;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        hideColumn: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                // Find column index\r\n                var colIndex = -1, tbWhole = this[0];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        colIndex = z;\r\n                        break;\r\n                    }\r\n                }\r\n                // Make sure the column exist and hide the column if it is visible only\r\n                if (colIndex != -1 && !settings.columns[colIndex].invisible) {\r\n                    // Change caption and footer column span\r\n                    settings._visibleCount--;\r\n                    settings._finalColSpan--;\r\n                    $('#' + settings.idPrefix + '_caption_td').attr('colSpan', settings._finalColSpan);\r\n                    $('#' + settings.idPrefix + '_footer_td').attr('colSpan', settings._finalColSpan);\r\n                    // Add invisible class on each row\r\n                    $('#' + settings.idPrefix + '_' + name + '_td_head').addClass('invisible');\r\n                    for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                        var uniqueIndex = settings._rowOrder[z];\r\n                        $('#' + settings.idPrefix + '_' + name + '_td_' + uniqueIndex).addClass('invisible');\r\n                        if (settings.useSubPanel) {\r\n                            $('#' + settings.idPrefix + '_SubRow_' + uniqueIndex).attr('colSpan', settings._visibleCount + (settings._hideLastColumn ? 0 : 1));\r\n                        }\r\n                    }\r\n                    // Save changes\r\n                    settings.columns[colIndex].invisible = true;\r\n                    saveSetting(tbWhole, settings);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        isColumnInvisible: function (name) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && name) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        return settings.columns[z].invisible;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowCount: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return settings._rowOrder.length;\r\n            }\r\n            return null;\r\n        },\r\n        getUniqueIndex: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && langx.isNumeric(rowIndex) && rowIndex < settings._rowOrder.length) {\r\n                return settings._rowOrder[rowIndex];\r\n            }\r\n            return null;\r\n        },\r\n        getRowIndex: function (uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && langx.isNumeric(uniqueIndex)) {\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (settings._rowOrder[z] == uniqueIndex) {\r\n                        return z;\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowValue: function (rowIndex, uniqueIndex, loopIndex) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                if (langx.isNumeric(rowIndex) && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                    uniqueIndex = settings._rowOrder[rowIndex];\r\n                }\r\n                if (!isEmpty(uniqueIndex)) {\r\n                    result = getRowValue(settings, uniqueIndex, loopIndex);\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getAllValue: function (objectMode) {\r\n            var settings = checkGridAndGetSettings(this), result = null;\r\n            if (settings) {\r\n                // Prepare result based on objectMode setting\r\n                result = objectMode ? {} : [];\r\n                // Process on each rows\r\n                for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                    if (objectMode) {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z], z);\r\n                        langx.extend(result, rowValue)\r\n                    } else {\r\n                        rowValue = getRowValue(settings, settings._rowOrder[z]);\r\n                        result.push(rowValue);\r\n                    }\r\n                }\r\n                if (objectMode) {\r\n                    result[settings.rowCountName] = settings._rowOrder.length;\r\n                }\r\n            }\r\n            return result;\r\n        },\r\n        getCtrlValue: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCtrlValue(settings, z, settings._rowOrder[rowIndex]);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        setCtrlValue: function (name, rowIndex, value) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name == name) {\r\n                        setCtrlValue(settings, z, settings._rowOrder[rowIndex], value);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        getCellCtrl: function (name, rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings && rowIndex >= 0 && rowIndex < settings._rowOrder.length) {\r\n                var uniqueIndex = settings._rowOrder[rowIndex];\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getCellCtrlByUniqueIndex: function (name, uniqueIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                for (var z = 0; z < settings.columns.length; z++) {\r\n                    if (settings.columns[z].name === name) {\r\n                        return getCellCtrl(settings.columns[z].type, settings.idPrefix, name, uniqueIndex);\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n        getRowOrder: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of `Row Order` array\r\n                return settings._rowOrder.slice();\r\n            }\r\n            return null;\r\n        },\r\n        getColumns: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                // Return a copy of the columns array\r\n                return settings.columns.slice();\r\n            }\r\n            return null;\r\n        },\r\n        isRowEmpty: function (rowIndex) {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                return isRowEmpty(settings, rowIndex);\r\n            }\r\n            return null;\r\n        },\r\n        removeEmptyRows: function () {\r\n            var settings = checkGridAndGetSettings(this);\r\n            if (settings) {\r\n                var tbWhole = this[0];\r\n                for (var z = settings._rowOrder.length; z >= 0; z--) {\r\n                    if (isRowEmpty(settings, z)) {\r\n                        // Remove itself\r\n                        removeRow(tbWhole, null, settings._rowOrder[z], true);\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    function checkGridAndGetSettings(grid, noMsg) {\r\n        // Check the jQuery grid object is initialized and return its settings\r\n        var settings = null;\r\n        if (grid.length == 1) {\r\n            settings = grid.data('appendGrid');\r\n            if (!settings && !noMsg) {\r\n                alert(_systemMessages.notInit);\r\n            }\r\n        } else if (!noMsg) {\r\n            alert(_systemMessages.getValueMultiGrid);\r\n        }\r\n        return settings;\r\n    }\r\n    function insertRow(tbWhole, numOfRowOrRowArray, rowIndex, callerUniqueIndex) {\r\n        // Define variables\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var addedRows = [], parentIndex = null, uniqueIndex, ctrl, hidden = [];\r\n        var tbHead = tbWhole.getElementsByTagName('thead')[0];\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        var tbRow, tbSubRow = null, tbCell, reachMaxRow = false, calColWidth = false;\r\n        var oldHeight = 0, oldScroll = 0;\r\n        if (settings.maxBodyHeight > 0) {\r\n            tbHead = $('#' + settings._wrapperId + ' table thead')[0];\r\n        }\r\n        // Check number of row to be inserted\r\n        var numOfRow = numOfRowOrRowArray, loadData = false;\r\n        if (langx.isArray(numOfRowOrRowArray)) {\r\n            numOfRow = numOfRowOrRowArray.length;\r\n            loadData = true;\r\n        }\r\n        // Check parent row\r\n        if (langx.isNumeric(callerUniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == callerUniqueIndex) {\r\n                    rowIndex = z;\r\n                    if (z != 0) parentIndex = z - 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (langx.isNumeric(rowIndex)) {\r\n            if (rowIndex >= settings._rowOrder.length) {\r\n                rowIndex = null;\r\n            } else {\r\n                parentIndex = rowIndex - 1;\r\n            }\r\n        }\r\n        else if (settings._rowOrder.length != 0) {\r\n            rowIndex = null;\r\n            parentIndex = settings._rowOrder.length - 1;\r\n        }\r\n        // Store old grid height\r\n        if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n            oldHeight = $(tbWhole).height();\r\n            oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n        }\r\n        // Remove empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            $('tr.empty', tbWhole).remove();\r\n            calColWidth = true;\r\n        }\r\n        // Add total number of row\r\n        for (var z = 0; z < numOfRow; z++) {\r\n            // Check maximum number of rows\r\n            if (0 < settings.maxRowsAllowed && settings._rowOrder.length >= settings.maxRowsAllowed) {\r\n                reachMaxRow = true;\r\n                break;\r\n            }\r\n            // Update variables\r\n            settings._uniqueIndex++;\r\n            uniqueIndex = settings._uniqueIndex;\r\n            hidden.length = 0;\r\n            // Check row insert index\r\n            if (langx.isNumeric(rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 0, uniqueIndex);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.insertBefore(tbSubRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.insertBefore(tbRow = document.createElement('tr'), tbBody.childNodes[rowIndex]);\r\n                }\r\n                addedRows.push(rowIndex);\r\n            }\r\n            else {\r\n                settings._rowOrder.push(uniqueIndex);\r\n                tbBody.appendChild(tbRow = document.createElement('tr'));\r\n                if (settings.useSubPanel) {\r\n                    tbBody.appendChild(tbSubRow = document.createElement('tr'));\r\n                }\r\n                addedRows.push(settings._rowOrder.length - 1);\r\n            }\r\n            tbRow.id = settings.idPrefix + '_Row_' + uniqueIndex;\r\n            if (settings._sectionClasses.body) {\r\n                tbRow.className = settings._sectionClasses.body;\r\n            }\r\n            $(tbRow).data('appendGrid', uniqueIndex);\r\n            // Config on the sub panel row\r\n            if (tbSubRow != null) {\r\n                tbSubRow.id = settings.idPrefix + '_SubRow_' + uniqueIndex;\r\n                $(tbSubRow).data('appendGrid', uniqueIndex);\r\n                if (settings._sectionClasses.subPanel) {\r\n                    tbSubRow.className = settings._sectionClasses.subPanel;\r\n                }\r\n            }\r\n            // Add row number\r\n            if (!settings.hideRowNumColumn) {\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                $(tbCell).addClass('ui-widget-content first').text(settings._rowOrder.length);\r\n                if (settings.useSubPanel) tbCell.rowSpan = 2;\r\n            }\r\n            // Process on each columns\r\n            for (var y = 0; y < settings.columns.length; y++) {\r\n                // Skip hidden\r\n                if (settings.columns[y].type == 'hidden') {\r\n                    hidden.push(y);\r\n                    continue;\r\n                }\r\n                // Check column invisble\r\n                var className = 'ui-widget-content';\r\n                if (settings.columns[y].invisible) className += ' invisible';\r\n                // Insert cell\r\n                tbRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.id = settings.idPrefix + '_' + settings.columns[y].name + '_td_' + uniqueIndex;\r\n                tbCell.className = className;\r\n                if (settings.columns[y].cellCss != null) $(tbCell).css(settings.columns[y].cellCss);\r\n                // Prepare control id and name\r\n                var ctrlId = settings.idPrefix + '_' + settings.columns[y].name + '_' + uniqueIndex, ctrlName;\r\n                if (langx.isFunction(settings.nameFormatter)) {\r\n                    ctrlName = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                } else {\r\n                    ctrlName = ctrlId;\r\n                }\r\n                // Check control type\r\n                ctrl = null;\r\n                if (settings.columns[y].type == 'custom') {\r\n                    if (langx.isFunction(settings.columns[y].customBuilder)) {\r\n                        ctrl = settings.columns[y].customBuilder(tbCell, settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    }\r\n                } else if (settings.columns[y].type == 'select' || settings.columns[y].type == 'ui-selectmenu') {\r\n                    ctrl = document.createElement('select');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    // Build option list\r\n                    if (langx.isArray(settings.columns[y].ctrlOptions)) {\r\n                        // For array type option list\r\n                        if (settings.columns[y].ctrlOptions.length > 0) {\r\n                            if (langx.isPlainObject(settings.columns[y].ctrlOptions[0])) {\r\n                                // Check to generate optGroup or not\r\n                                var lastGroupName = null, lastGroupElem = null;\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].group)) {\r\n                                        if (lastGroupName != settings.columns[y].ctrlOptions[x].group) {\r\n                                            lastGroupName = settings.columns[y].ctrlOptions[x].group;\r\n                                            lastGroupElem = document.createElement('optgroup');\r\n                                            lastGroupElem.label = lastGroupName;\r\n                                            ctrl.appendChild(lastGroupElem);\r\n                                        }\r\n                                    } else {\r\n                                        lastGroupElem = null;\r\n                                    }\r\n                                    var option = $('<option/>').val(settings.columns[y].ctrlOptions[x].value).text(settings.columns[y].ctrlOptions[x].label);\r\n                                    if (!isEmpty(settings.columns[y].ctrlOptions[x].title)) {\r\n                                        option.attr('title', settings.columns[y].ctrlOptions[x].title);\r\n                                    }\r\n                                    if (null == lastGroupElem) {\r\n                                        option.appendTo(ctrl);\r\n                                    }\r\n                                    else {\r\n                                        option.appendTo(lastGroupElem);\r\n                                    }\r\n                                    // ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x].label, settings.columns[y].ctrlOptions[x].value);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (var x = 0; x < settings.columns[y].ctrlOptions.length; x++) {\r\n                                    ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], settings.columns[y].ctrlOptions[x]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (langx.isPlainObject(settings.columns[y].ctrlOptions)) {\r\n                        // For plain object type option list\r\n                        for (var x in settings.columns[y].ctrlOptions) {\r\n                            ctrl.options[ctrl.options.length] = new Option(settings.columns[y].ctrlOptions[x], x);\r\n                        }\r\n                    } else if (typeof (settings.columns[y].ctrlOptions) == 'string') {\r\n                        // For string type option list\r\n                        var arrayOpt = settings.columns[y].ctrlOptions.split(';');\r\n                        for (var x = 0; x < arrayOpt.length; x++) {\r\n                            var eqIndex = arrayOpt[x].indexOf(':');\r\n                            if (-1 == eqIndex) {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x], arrayOpt[x]);\r\n                            } else {\r\n                                ctrl.options[ctrl.options.length] = new Option(arrayOpt[x].substring(eqIndex + 1, arrayOpt[x].length), arrayOpt[x].substring(0, eqIndex));\r\n                            }\r\n                        }\r\n                    } else if (langx.isFunction(settings.columns[y].ctrlOptions)) {\r\n                        settings.columns[y].ctrlOptions(ctrl);\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-selectmenu') {\r\n                        $(ctrl).selectmenu(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                else if (settings.columns[y].type == 'checkbox') {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'checkbox';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    ctrl.value = 1;\r\n                    tbCell.appendChild(ctrl);\r\n                    tbCell.style.textAlign = 'center';\r\n                }\r\n                else if (settings.columns[y].type == 'textarea') {\r\n                    ctrl = document.createElement('textarea');\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else if (-1 != settings.columns[y].type.search(/^(color|date|datetime|datetime\\-local|email|month|number|range|search|tel|time|url|week)$/)) {\r\n                    ctrl = document.createElement('input');\r\n                    try {\r\n                        ctrl.type = settings.columns[y].type;\r\n                    }\r\n                    catch (err) { /* Not supported type */ }\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                else {\r\n                    // Generate text input\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.type = 'text';\r\n                    ctrl.id = ctrlId;\r\n                    ctrl.name = ctrlName;\r\n                    tbCell.appendChild(ctrl);\r\n                    // Handle UI widget\r\n                    if (settings.columns[y].type == 'ui-datepicker') {\r\n                        $(ctrl).datepicker(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-spinner') {\r\n                        $(ctrl).spinner(settings.columns[y].uiOption);\r\n                    } else if (settings.columns[y].type == 'ui-autocomplete') {\r\n                        $(ctrl).autocomplete(settings.columns[y].uiOption);\r\n                    }\r\n                }\r\n                // Add extra control properties\r\n                if (settings.columns[y].type != 'custom') {\r\n                    // Add control attributes as needed\r\n                    if (settings.columns[y].ctrlAttr != null) $(ctrl).attr(settings.columns[y].ctrlAttr);\r\n                    // Add control properties as needed\r\n                    if (settings.columns[y].ctrlProp != null) $(ctrl).prop(settings.columns[y].ctrlProp);\r\n                    // Add control CSS as needed\r\n                    if (settings.columns[y].ctrlCss != null) $(ctrl).css(settings.columns[y].ctrlCss);\r\n                    // Add control class as needed\r\n                    if (settings.columns[y].ctrlClass != null) $(ctrl).addClass(settings.columns[y].ctrlClass);\r\n                    // Add jQuery UI tooltip as needed\r\n                    if (settings.columns[y].uiTooltip) $(ctrl).tooltip(settings.columns[y].uiTooltip);\r\n                    // Add control events as needed\r\n                    if (langx.isFunction(settings.columns[y].onClick)) {\r\n                        $(ctrl).click({ caller: tbWhole, callback: settings.columns[y].onClick, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                    if (langx.isFunction(settings.columns[y].onChange)) {\r\n                        $(ctrl).change({ caller: tbWhole, callback: settings.columns[y].onChange, uniqueIndex: uniqueIndex }, function (evt) {\r\n                            evt.data.callback(evt, $(evt.data.caller).appendGrid('getRowIndex', evt.data.uniqueIndex));\r\n                        });\r\n                    }\r\n                }\r\n                if (loadData) {\r\n                    // Load data if needed\r\n                    setCtrlValue(settings, y, uniqueIndex, numOfRowOrRowArray[z][settings.columns[y].name]);\r\n                } else if (!isEmpty(settings.columns[y].value)) {\r\n                    // Set default value\r\n                    setCtrlValue(settings, y, uniqueIndex, settings.columns[y].value);\r\n                }\r\n            }\r\n            // Add button cell if needed\r\n            if (!settings._hideLastColumn || settings.columns.length > settings._visibleCount) {\r\n                if (!settings.rowButtonsInFront) {\r\n                    tbRow.appendChild(tbCell = document.createElement('td'));\r\n                } else if (!settings.hideRowNumColumn) {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.childNodes[1]);\r\n                } else {\r\n                    tbRow.insertBefore(tbCell = document.createElement('td'), tbRow.firstChild);\r\n                }\r\n                tbCell.className = 'ui-widget-content last';\r\n                tbCell.id = settings.idPrefix + '_last_td_' + uniqueIndex;\r\n                if (settings._hideLastColumn) tbCell.style.display = 'none';\r\n                // Add standard buttons\r\n                if (!settings.hideButtons.insert) {\r\n                    var button = createGridButton(settings.customGridButtons.insert, 'ui-icon-arrowreturnthick-1-w')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Insert_' + uniqueIndex, title: settings._i18n.insert, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('insert').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('insertRow', 1, null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault(settings._buttonClasses.insert);\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.insert)) button.addClass(settings._buttonClasses.insert);\r\n                }\r\n                if (!settings.hideButtons.remove) {\r\n                    var button = createGridButton(settings.customGridButtons.remove, 'ui-icon-trash')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_Delete_' + uniqueIndex, title: settings._i18n.remove, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('remove').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n                        .click(function (evt) {\r\n                            var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n                            removeRow(tbWhole, null, rowUniqueIndex, false);\r\n                            if (evt && evt.preventDefault) evt.preventDefault();\r\n                            return false;\r\n                        }).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.remove)) button.addClass(settings._buttonClasses.remove);\r\n                }\r\n                if (!settings.hideButtons.moveUp) {\r\n                    var button = createGridButton(settings.customGridButtons.moveUp, 'ui-icon-arrowthick-1-n')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveUp_' + uniqueIndex, title: settings._i18n.moveUp, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveUp').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveUpRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveUp)) button.addClass(settings._buttonClasses.moveUp);\r\n                }\r\n                if (!settings.hideButtons.moveDown) {\r\n                    var button = createGridButton(settings.customGridButtons.moveDown, 'ui-icon-arrowthick-1-s')\r\n\t\t\t\t\t\t.attr({ id: settings.idPrefix + '_MoveDown_' + uniqueIndex, title: settings._i18n.moveDown, tabindex: -1 })\r\n\t\t\t\t\t\t.addClass('moveDown').data('appendGrid', { uniqueIndex: uniqueIndex })\r\n\t\t\t\t\t\t.click(function (evt) {\r\n\t\t\t\t\t\t    var rowUniqueIndex = $(this).data('appendGrid').uniqueIndex;\r\n\t\t\t\t\t\t    $(tbWhole).appendGrid('moveDownRow', null, rowUniqueIndex);\r\n\t\t\t\t\t\t    if (evt && evt.preventDefault) evt.preventDefault();\r\n\t\t\t\t\t\t    return false;\r\n\t\t\t\t\t\t}).appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.moveDown)) button.addClass(settings._buttonClasses.moveDown);\r\n                }\r\n                // Handle row dragging\r\n                if (settings.rowDragging) {\r\n                    var button = $('<div/>').addClass('rowDrag ui-state-default ui-corner-all')\r\n                        .attr('title', settings._i18n.rowDrag).append($('<div/>').addClass('ui-icon ui-icon-caret-2-n-s').append($('<span/>').addClass('ui-button-text').text('Drag')))\r\n                        .appendTo(tbCell);\r\n                    if (!isEmpty(settings._buttonClasses.rowDrag)) button.addClass(settings._buttonClasses.rowDrag);\r\n                }\r\n                // Add hidden\r\n                for (var y = 0; y < hidden.length; y++) {\r\n                    ctrl = document.createElement('input');\r\n                    ctrl.id = settings.idPrefix + '_' + settings.columns[hidden[y]].name + '_' + uniqueIndex;\r\n                    if (langx.isFunction(settings.nameFormatter)) {\r\n                        ctrl.name = settings.nameFormatter(settings.idPrefix, settings.columns[y].name, uniqueIndex);\r\n                    } else {\r\n                        ctrl.name = ctrl.id;\r\n                    }\r\n                    ctrl.type = 'hidden';\r\n\r\n                    if (loadData) {\r\n                        // Load data if needed\r\n                        ctrl.value = numOfRowOrRowArray[z][settings.columns[hidden[y]].name];\r\n                    } else if (!isEmpty(settings.columns[hidden[y]].value)) {\r\n                        // Set default value\r\n                        ctrl.value = settings.columns[hidden[y]].value;\r\n                    }\r\n                    tbCell.appendChild(ctrl);\r\n                }\r\n                // Add extra buttons\r\n                if (settings.customRowButtons && settings.customRowButtons.length) {\r\n                    // Add front buttons\r\n                    for (var y = settings.customRowButtons.length - 1; y >= 0; y--) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && buttonCfg.atTheFront) {\r\n                            $(tbCell).prepend(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                    // Add end buttons\r\n                    for (var y = 0; y < settings.customRowButtons.length; y++) {\r\n                        var buttonCfg = settings.customRowButtons[y];\r\n                        if (buttonCfg && buttonCfg.uiButton && buttonCfg.click && !buttonCfg.atTheFront) {\r\n                            $(tbCell).append(makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // Create sub panel\r\n            if (settings.useSubPanel) {\r\n                tbSubRow.appendChild(tbCell = document.createElement('td'));\r\n                tbCell.className = 'ui-widget-content';\r\n                tbCell.colSpan = settings._visibleCount + (settings._hideLastColumn ? 0 : 1);\r\n                if (langx.isFunction(settings.subPanelBuilder)) {\r\n                    settings.subPanelBuilder(tbCell, uniqueIndex);\r\n                }\r\n            }\r\n        }\r\n        // Check if re-calculate column width is required\r\n        if (0 < settings.maxBodyHeight && settings._calculateWidth && !calColWidth) {\r\n            var scroll = $('#' + settings._wrapperId + '>div.scroller')[0];\r\n            if (scroll.scrollHeight > scroll.offsetHeight) {\r\n                calColWidth = true;\r\n                settings._calculateWidth = false;\r\n            }\r\n        }\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Calculate column width\r\n        if (calColWidth && settings.autoColumnWidth && settings.maxBodyHeight > 0) {\r\n            calculateColumnWidth(document.getElementById(settings._wrapperId));\r\n        }\r\n        // Trigger events\r\n        if (langx.isNumeric(rowIndex)) {\r\n            if (langx.isFunction(settings.afterRowInserted)) {\r\n                settings.afterRowInserted(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        else {\r\n            if (langx.isFunction(settings.afterRowAppended)) {\r\n                settings.afterRowAppended(tbWhole, parentIndex, addedRows);\r\n            }\r\n        }\r\n        if (reachMaxRow && langx.isFunction(settings.maxNumRowsReached)) {\r\n            settings.maxNumRowsReached();\r\n        }\r\n        // Scroll the page when append row\r\n        if (settings.maintainScroll && !langx.isNumeric(rowIndex)) {\r\n            // Try to maintain the height so that user no need to scroll every time when row added\r\n            var newHeight = $(tbWhole).height();\r\n            $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n        }\r\n        // Return added rows' uniqueIndex\r\n        return { addedRows: addedRows, parentIndex: parentIndex, rowIndex: rowIndex };\r\n    }\r\n    function makeCustomBottomButton(tbWhole, buttonCfg) {\r\n        var exButton = $('<button/>').attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole }, buttonCfg.click);\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function makeCustomRowButton(tbWhole, buttonCfg, uniqueIndex) {\r\n        var exButton = $('<button/>').val(uniqueIndex).attr({ type: 'button', tabindex: -1 })\r\n        .button(buttonCfg.uiButton).click({ tbWhole: tbWhole, uniqueIndex: uniqueIndex }, function (evt) {\r\n            var rowData = $(evt.data.tbWhole).appendGrid('getRowValue', null, evt.data.uniqueIndex);\r\n            buttonCfg.click(evt, evt.data.uniqueIndex, rowData);\r\n        });\r\n        if (buttonCfg.btnClass) exButton.addClass(buttonCfg.btnClass);\r\n        if (buttonCfg.btnCss) exButton.css(buttonCfg.btnCss);\r\n        if (buttonCfg.btnAttr) exButton.attr(buttonCfg.btnAttr);\r\n        return exButton;\r\n    }\r\n    function removeRow(tbWhole, rowIndex, uniqueIndex, force) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        var tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n        if (langx.isNumeric(uniqueIndex)) {\r\n            for (var z = 0; z < settings._rowOrder.length; z++) {\r\n                if (settings._rowOrder[z] == uniqueIndex) {\r\n                    rowIndex = z;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (langx.isNumeric(rowIndex)) {\r\n            // Remove middle row\r\n            if (force || typeof (settings.beforeRowRemove) != 'function' || settings.beforeRowRemove(tbWhole, rowIndex)) {\r\n                settings._rowOrder.splice(rowIndex, 1);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex * 2]);\r\n                } else {\r\n                    tbBody.removeChild(tbBody.childNodes[rowIndex]);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Sort sequence\r\n                sortSequence(tbWhole, rowIndex);\r\n                // Trigger event\r\n                if (langx.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, rowIndex);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Store old window scroll value\r\n            var oldHeight = 0, oldScroll = 0;\r\n            if (settings.maintainScroll) {\r\n                oldHeight = $(tbWhole).height();\r\n                oldScroll = $(tbWhole).scrollParent().scrollTop();\r\n            }\r\n            // Remove last row\r\n            if (force || !langx.isFunction(settings.beforeRowRemove) || settings.beforeRowRemove(tbWhole, settings._rowOrder.length - 1)) {\r\n                uniqueIndex = settings._rowOrder.pop();\r\n                tbBody.removeChild(tbBody.lastChild);\r\n                if (settings.useSubPanel) {\r\n                    tbBody.removeChild(tbBody.lastChild);\r\n                }\r\n                // Save setting\r\n                saveSetting(tbWhole, settings);\r\n                // Trigger event\r\n                if (langx.isFunction(settings.afterRowRemoved)) {\r\n                    settings.afterRowRemoved(tbWhole, null);\r\n                }\r\n            }\r\n            // Scroll the page when append row\r\n            if (settings.maintainScroll) {\r\n                // Try to maintain the height so that user no need to scroll every time when row added\r\n                var newHeight = $(tbWhole).height();\r\n                $(tbWhole).scrollParent().scrollTop(oldScroll + newHeight - oldHeight);\r\n            }\r\n        }\r\n        // Add empty row\r\n        if (settings._rowOrder.length == 0) {\r\n            showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n        }\r\n    }\r\n    function showEmptyMessage(tbWrap, settings, skipWidthCalculation) {\r\n        var $emptyCell = $('<td></td>').text(settings._i18n.rowEmpty).attr('colspan', settings._finalColSpan);\r\n        $('table.body tbody', tbWrap).append($('<tr></tr>').addClass('empty').append($emptyCell));\r\n        if (!skipWidthCalculation && settings.maxBodyHeight > 0) {\r\n            // Check scrolling enabled\r\n            if (settings.autoColumnWidth) {\r\n                calculateColumnWidth(tbWrap);\r\n            } else {\r\n                // Set the width of empty message cell to the thead width\r\n                $emptyCell.width($('table.head', tbWrap).width() - 4);\r\n            }\r\n        }\r\n    }\r\n    function emptyGrid(tbWhole) {\r\n        // Load settings\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Remove rows\r\n        $('tbody', tbWhole).empty();\r\n        settings._rowOrder.length = 0;\r\n        settings._uniqueIndex = 0;\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n        // Add empty row\r\n        showEmptyMessage(document.getElementById(settings._wrapperId), settings);\r\n    }\r\n    function sortSequence(tbWhole, startIndex) {\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (!settings.hideRowNumColumn) {\r\n            for (var z = startIndex; z < settings._rowOrder.length; z++) {\r\n                $('#' + settings.idPrefix + '_Row_' + settings._rowOrder[z] + ' td.first', tbWhole).text(z + 1);\r\n            }\r\n        }\r\n    }\r\n    function loadData(tbWhole, records, isInit) {\r\n        var tbBody, tbRow, tbCell, uniqueIndex, insertResult;\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        if (settings) {\r\n            // Clear existing content\r\n            tbBody = tbWhole.getElementsByTagName('tbody')[0];\r\n            $(tbBody).empty();\r\n            settings._rowOrder.length = 0;\r\n            settings._uniqueIndex = 0;\r\n            // Check any records\r\n            if (records != null && records.length) {\r\n                // Add rows\r\n                insertResult = insertRow(tbWhole, records.length, null, null);\r\n                // Set data\r\n                for (var r = 0; r < insertResult.addedRows.length; r++) {\r\n                    for (var c = 0; c < settings.columns.length; c++) {\r\n                        setCtrlValue(settings, c, settings._rowOrder[r], records[r][settings.columns[c].name]);\r\n                    }\r\n                    if (langx.isFunction(settings.rowDataLoaded)) {\r\n                        settings.rowDataLoaded(tbWhole, records[r], r, settings._rowOrder[r]);\r\n                    }\r\n                }\r\n            }\r\n            // Save setting\r\n            settings._isDataLoaded = true;\r\n            if (isInit) settings.initData = null;\r\n            $(tbWhole).data('appendGrid', settings);\r\n            // Trigger data loaded event\r\n            if (langx.isFunction(settings.dataLoaded)) {\r\n                settings.dataLoaded(tbWhole, records);\r\n            }\r\n        }\r\n    }\r\n    function findRowIndex(uniqueIndex, settings) {\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    function isEmpty(value) {\r\n        return typeof (value) == 'undefined' || value == null;\r\n    }\r\n    function getObjValue(obj, key) {\r\n        if (!isEmpty(obj) && langx.isPlainObject(obj) && !isEmpty(obj[key])) {\r\n            return obj[key];\r\n        }\r\n        return null;\r\n    }\r\n    function saveSetting(tbWhole, settings) {\r\n        $(tbWhole).data('appendGrid', settings);\r\n        $('#' + settings.idPrefix + '_rowOrder', tbWhole).val(settings._rowOrder.join());\r\n    }\r\n    function getRowIndex(settings, uniqueIndex) {\r\n        var rowIndex = null;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                return z;\r\n            }\r\n        }\r\n        return rowIndex;\r\n    }\r\n    function getRowValue(settings, uniqueIndex, loopIndex) {\r\n        var result = {}, keyName = null, suffix = (isEmpty(loopIndex) ? '' : '_' + loopIndex);\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            keyName = settings.columns[z].name + suffix;\r\n            result[keyName] = getCtrlValue(settings, z, uniqueIndex);\r\n        }\r\n        // Merge control values from sub panel if getter method defined\r\n        if (settings.useSubPanel && langx.isFunction(settings.subPanelGetter)) {\r\n            var adtData = settings.subPanelGetter(uniqueIndex);\r\n            if (langx.isPlainObject(adtData)) {\r\n                if (suffix == '') {\r\n                    // Extend to row data directly for array mode\r\n                    langx.extend(result, adtData);\r\n                } else {\r\n                    // For returning values in object mode, add suffix to all keys\r\n                    var newData = {};\r\n                    for (var key in adtData) {\r\n                        newData[key + suffix] = adtData[key];\r\n                    }\r\n                    langx.extend(result, newData);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    function getCtrlValue(settings, colIndex, uniqueIndex) {\r\n        var type = settings.columns[colIndex].type, columnName = settings.columns[colIndex].name;\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customGetter)) {\r\n                return settings.columns[colIndex].customGetter(settings.idPrefix, columnName, uniqueIndex);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            var ctrl = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (ctrl == null) {\r\n                return null;\r\n            }\r\n            else if (type == 'checkbox') {\r\n                return ctrl.checked ? 1 : 0;\r\n            } else {\r\n                return $(ctrl).val();\r\n            }\r\n        }\r\n    }\r\n    function getCellCtrl(type, idPrefix, columnName, uniqueIndex) {\r\n        return document.getElementById(idPrefix + '_' + columnName + '_' + uniqueIndex);\r\n    }\r\n    function setCtrlValue(settings, colIndex, uniqueIndex, data) {\r\n        var type = settings.columns[colIndex].type;\r\n        var columnName = settings.columns[colIndex].name;\r\n        // Handle values by type\r\n        if (type == 'custom') {\r\n            if (langx.isFunction(settings.columns[colIndex].customSetter)) {\r\n                settings.columns[colIndex].customSetter(settings.idPrefix, columnName, uniqueIndex, data);\r\n            } else {\r\n                // `customSetter` is not a function?? Skip handling...\r\n            }\r\n        } else {\r\n            var element = getCellCtrl(type, settings.idPrefix, columnName, uniqueIndex);\r\n            if (type == 'checkbox') {\r\n                element.checked = (data != null && data != 0);\r\n            } else if (type == 'ui-selectmenu') {\r\n                element.value = (data == null ? '' : data);\r\n                $(element).selectmenu('refresh');\r\n            }\r\n            else {\r\n                $(element).val(data == null ? '' : data);\r\n            }\r\n        }\r\n    }\r\n    function gridRowDragged(tbWhole, isMoveUp, uniqueIndex, tbRowIndex) {\r\n        // Get setting\r\n        var settings = $(tbWhole).data('appendGrid');\r\n        // Find the start sorting index\r\n        var startIndex = -1;\r\n        for (var z = 0; z < settings._rowOrder.length; z++) {\r\n            if (settings._rowOrder[z] == uniqueIndex) {\r\n                if (isMoveUp) {\r\n                    startIndex = tbRowIndex;\r\n                    settings._rowOrder.splice(z, 1);\r\n                    settings._rowOrder.splice(tbRowIndex, 0, uniqueIndex);\r\n                } else {\r\n                    startIndex = z;\r\n                    settings._rowOrder.splice(tbRowIndex + 1, 0, uniqueIndex);\r\n                    settings._rowOrder.splice(z, 1);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        // Do re-order\r\n        sortSequence(tbWhole, startIndex);\r\n        // Save setting\r\n        saveSetting(tbWhole, settings);\r\n\r\n        // Trigger event\r\n        if (langx.isFunction(settings.afterRowDragged)) {\r\n            settings.afterRowDragged(tbWhole, tbRowIndex, uniqueIndex);\r\n        }\r\n    }\r\n    function createGridButton(param, uiIcon) {\r\n        // Generate the standard grid action button based on its parameter.\r\n        var genButton = null;\r\n        if (param) {\r\n            if (langx.isFunction(param)) {\r\n                // Generate button if it is a function.\r\n                genButton = $(param());\r\n            } else if (param.nodeType) {\r\n                // Clone the button if it is a DOM element.\r\n                genButton = $(param).clone();\r\n            } else if (param.icon || param.label) {\r\n                // Generate jQuery UI Button if it is a plain object with `icon` or `label` property.\r\n                genButton = $('<button/>').attr({ type: 'button' }).button(param);\r\n            }\r\n        }\r\n        if (!genButton) {\r\n            // Use default setting (jQuery UI Button) if button is not created.\r\n            genButton = $('<button/>').attr({ type: 'button' }).button({ icon: uiIcon, showLabel: false });\r\n        }\r\n        return genButton;\r\n    }\r\n    function isRowEmpty(settings, rowIndex) {\r\n        for (var z = 0; z < settings.columns.length; z++) {\r\n            var uniqueIndex = settings._rowOrder[rowIndex];\r\n            var currentValue = getCtrlValue(settings, z, uniqueIndex);\r\n            // Check the empty criteria is function\r\n            if (langx.isFunction(settings.columns[z].emptyCriteria)) {\r\n                if (!settings.columns[z].emptyCriteria(currentValue)) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                // Find the default value\r\n                var defaultValue = null;\r\n                if (!isEmpty(settings.columns[z].emptyCriteria)) {\r\n                    defaultValue = settings.columns[z].emptyCriteria;\r\n                } else {\r\n                    // Check default value based on its type\r\n                    if (settings.columns[z].type == 'checkbox') {\r\n                        defaultValue = 0;\r\n                    } else if (settings.columns[z].type == 'select' || settings.columns[z].type == 'ui-selectmenu') {\r\n                        var options = getCellCtrl(settings.columns[z].type, settings.idPrefix, settings.columns[z].name, uniqueIndex).options;\r\n                        if (options.length > 0) {\r\n                            defaultValue = options[0].value;\r\n                        } else {\r\n                            defaultValue = '';\r\n                        }\r\n                    } else {\r\n                        defaultValue = '';\r\n                    }\r\n                }\r\n                // Compare with the default value\r\n                if (currentValue != defaultValue) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function calculateColumnWidth(tbWrap) {\r\n        var $tbWhole = $('table.body', tbWrap);\r\n        var $scroller = $('div.scroller', tbWrap);\r\n        var settings = $tbWhole.data('appendGrid');\r\n        var tbHeadRow = $('table.head tr.columnHead', tbWrap)[0];\r\n        var tbColGp = $('table.body colgroup', tbWrap)[0];\r\n        // Check any rows within the grid\r\n        if (settings._rowOrder.length > 0) {\r\n            // Reset the table/column width\r\n            $('td', tbHeadRow).width('auto');\r\n            $('col', tbColGp).width('auto');\r\n            $tbWhole.width('auto');\r\n            $scroller.width('auto');\r\n            // Check the total number of columns\r\n            var tbBodyRow = $('tbody tr', $tbWhole)[0];\r\n            var marginThreshold = -2;\r\n            if ($.fn.modal) {\r\n                // If bootstrap is loaded, cell margin was reset\r\n                marginThreshold = 1;\r\n            }\r\n            var colLimit = Math.min(tbHeadRow.childNodes.length, tbBodyRow.childNodes.length);\r\n            for (var z = 0; z < colLimit; z++) {\r\n                var headCellWidth = tbHeadRow.childNodes[z].clientWidth + 1;\r\n                var bodyCellWidth = tbBodyRow.childNodes[z].clientWidth + marginThreshold;\r\n                if (bodyCellWidth > headCellWidth) {\r\n                    tbHeadRow.childNodes[z].style.width = bodyCellWidth + 'px';\r\n                } else {\r\n                    tbColGp.childNodes[z].style.width = headCellWidth + 'px';\r\n                }\r\n            }\r\n        } else {\r\n            $('table.body,table.foot', tbWrap).width($('table.head').width());\r\n        }\r\n        // Set the width of footer row\r\n        $('table.foot', tbWrap).width($tbWhole.width());\r\n        // Check the scroll panel width\r\n        $scroller.width($tbWhole.width() + $scroller[0].offsetWidth - $scroller[0].clientWidth + 1);\r\n    }\r\n    /// <summary>\r\n    /// Initialize append grid or calling its methods.\r\n    /// </summary>\r\n    $.fn.appendGrid = function (params) {\r\n        if (_methods[params]) {\r\n            return _methods[params].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof (params) === 'object' || !params) {\r\n            return _methods.init.apply(this, arguments);\r\n        } else {\r\n            alert(_systemMessages.notSupportMethod + params);\r\n        }\r\n    };\r\n});\r\n\ndefine('skylark-jqueryui-appendgrid/main',[\r\n    \"skylark-utils-dom/query\",\r\n    \"./appendGrid\"\r\n],function($) {\r\n\treturn $;\r\n});\ndefine('skylark-jqueryui-appendgrid', ['skylark-jqueryui-appendgrid/main'], function (main) { return main; });\n\n"]}